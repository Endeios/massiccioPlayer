// Apply the java plugin to add support for Java,groovy,and application
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'

project.ext.set('javaHome', System.env['JAVA_HOME'])

project.group = "io.endeios"
project.version = "1.0.0"

mainClassName = "io.endeios.massiccioPlayer.massiccioRunSwing"



// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}
//we will need a shell to prototype things
configurations {
       shell 
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.6'
    compile 'org.codehaus.groovyfx:groovyfx:0.4.0'
    compile "org.codehaus.gpars:gpars:1.2.1"
    compile "uk.co.caprica:vlcj:3.0.1"
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:slf4j-simple:1.7.7'
    compile 'org.apache.commons:commons-lang3:3.3.2'

    compile files("${javaHome}/jre/lib/ext/jfxrt.jar")

    testCompile "junit:junit:4.11"
    shell 'commons-cli:commons-cli:1.2'
    shell('jline:jline:2.11') {
        exclude(group: 'junit', module: 'junit')
    }
    shell 'org.codehaus.groovy:groovy-groovysh:2.3.+'
}

task makeDirs(description:'make all dirs for project setup') << {
    def sources = [sourceSets.main, sourceSets.test]
    sources*.allSource*.srcDirs.flatten().each { File srcDir ->
        println "making $srcDir"
        srcDir.mkdirs()
    }
}

task(shell, dependsOn: 'classes') << {
    def classpath = sourceSets.main.runtimeClasspath + configurations.shell
    def command = [
        'java',
        '-cp', classpath.collect().join(':'),
        'org.codehaus.groovy.tools.shell.Main',
        '--color',
        '--terminal', 'unix']
    def proc = new ProcessBuilder(command)
        .redirectOutput(ProcessBuilder.Redirect.INHERIT)
        .redirectInput(ProcessBuilder.Redirect.INHERIT)
        .redirectError(ProcessBuilder.Redirect.INHERIT)
        .start()
    proc.waitFor()
}

task runtest(type: JavaExec){
    main = 'io.endeios.massiccioPlayer.MassiccioTest'
    classpath sourceSets.main.runtimeClasspath
   
}

task uberjar(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes 'Main-Class': 'io.endeios.massiccioPlayer.massiccioRunSwing'
    }
}


